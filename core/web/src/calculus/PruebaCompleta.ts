/**
* M√≥dulo de pruebas integrales del sistema de an√°lisis de tendencias.
* 
* Este m√≥dulo ejecuta una prueba completa end-to-end del pipeline de an√°lisis,
* validando la integraci√≥n entre todos los componentes: descarga de datos,
* procesamiento por plataformas, c√°lculos de m√©tricas, consolidaci√≥n de resultados
* y generaci√≥n de insights. Proporciona logging detallado para debugging y
* validaci√≥n del funcionamiento correcto de todo el sistema.
* 
* Autor: Lucio Arturo Reyes Castillo
* Contribuyentes: [Lista de contribuyentes]
*/

import { crearConDatosPrueba } from './DescargaDatos';
import { procesarParaDashboard } from './ConsolidacionDatos';

/**
* Ejecuta prueba integral completa del sistema de an√°lisis.
* 
* Valida el funcionamiento end-to-end del pipeline completo:
* carga de datos, procesamiento por plataformas, c√°lculos de m√©tricas,
* consolidaci√≥n de resultados y generaci√≥n de insights autom√°ticos.
* 
* @return Promise<DashboardData> - Datos consolidados del dashboard o error
*/
async function probarSistemaCompleto() {
 console.log('üöÄ ========================================');
 console.log('üß™ INICIANDO PRUEBA DEL SISTEMA COMPLETO');
 console.log('üöÄ ========================================');
 
 try {
   console.log('\nüì° PASO 1: Cargando datos...');
   const descargaDatos = crearConDatosPrueba();
   const resultadoFinal = await descargaDatos.obtenerResultadosCalculados();
   
   console.log('‚úÖ Datos cargados:');
   console.log('   üìä Hashtags:', resultadoFinal.metadatos.hashtagsOriginales);
   console.log('   üì∏ Instagram hashtags procesados:', resultadoFinal.resultadoInstaCalc.hashtags.length);
   console.log('   üî¥ Reddit hashtags procesados:', resultadoFinal.resultadoRedditCalc.hashtags.length);
   console.log('   üê¶ X hashtags procesados:', resultadoFinal.resultadoXCalc.hashtags.length);
   console.log('   üì∞ Noticias encontradas:', resultadoFinal.noticias.length);
   console.log('   üéØ Fuente de datos:', resultadoFinal.metadatos.fuente);
   
   // PASO 2: Procesar con ConsolidacionDatos
   console.log('\nüîß PASO 2: Consolidando datos...');
   const datosConsolidados = procesarParaDashboard(resultadoFinal);
   
   console.log('‚úÖ Consolidaci√≥n completada:');
   console.log('   üéØ Hashtags comparativos:', datosConsolidados.consolidacion.hashtagsComparativos.length);
   console.log('   üèÜ Ranking de plataformas:', datosConsolidados.consolidacion.rankingPlataformas.length);
   console.log('   üí° Insights generados:', datosConsolidados.consolidacion.insights.length);
   console.log('   üìã Recomendaciones:', datosConsolidados.consolidacion.recomendaciones.length);
   
   // PASO 3: Mostrar resultados detallados
   console.log('\nüìä RESUMEN EJECUTIVO:');
   console.log('   üè∑Ô∏è Total hashtags:', datosConsolidados.consolidacion.resumenEjecutivo.totalHashtags);
   console.log('   üöÄ Mejor hashtag:', datosConsolidados.consolidacion.resumenEjecutivo.mejorHashtag);
   console.log('   üèÜ Mejor plataforma:', datosConsolidados.consolidacion.resumenEjecutivo.mejorPlataforma);
   console.log('   üìà Tasa global:', datosConsolidados.consolidacion.resumenEjecutivo.tasaInteraccionGlobal + '%');
   console.log('   üìä Tendencia:', datosConsolidados.consolidacion.resumenEjecutivo.tendenciaGeneral);
   
   console.log('\nüí° INSIGHTS PRINCIPALES:');
   datosConsolidados.consolidacion.insights.forEach((insight, index) => {
     console.log(`   ${index + 1}. ${insight.titulo}`);
     console.log(`      ${insight.descripcion}`);
     if (insight.recomendacion) {
       console.log(`      üí° ${insight.recomendacion}`);
     }
   });
   
   console.log('\nüèÜ RANKING DE PLATAFORMAS:');
   datosConsolidados.consolidacion.rankingPlataformas.forEach((plataforma, index) => {
     console.log(`   ${index + 1}. ${plataforma.emoji} ${plataforma.plataforma} - ${plataforma.puntuacion.toFixed(2)}%`);
     console.log(`      ‚úÖ Fortalezas: ${plataforma.fortalezas.join(', ')}`);
     console.log(`      ‚ö†Ô∏è Debilidades: ${plataforma.debilidades.join(', ')}`);
   });
   
   console.log('\nüìã RECOMENDACIONES:');
   datosConsolidados.consolidacion.recomendaciones.forEach((rec, index) => {
     console.log(`   ${index + 1}. ${rec}`);
   });
   
   console.log('\nüìä M√âTRICAS GLOBALES:');
   console.log('   üîÑ Total interacciones:', datosConsolidados.consolidacion.metricas.totalInteracciones);
   console.log('   üì° Alcance estimado:', datosConsolidados.consolidacion.metricas.alcanceEstimado);
   console.log('   üí´ Engagement:', datosConsolidados.consolidacion.metricas.engagement + '%');
   console.log('   üöÄ Potencial viral:', datosConsolidados.consolidacion.metricas.potencialViral + '%');
   
   // PASO 4: Verificar datos para gr√°ficas
   console.log('\nüìà DATOS PARA GR√ÅFICAS:');
   console.log('   üì∏ Instagram - Primer hashtag tiene', datosConsolidados.resultadoInstaCalc.hashtags[0]?.datosInteraccion.length, 'puntos de datos');
   console.log('   üî¥ Reddit - Primer hashtag tiene', datosConsolidados.resultadoRedditCalc.hashtags[0]?.datosInteraccion.length, 'puntos de datos');
   console.log('   üê¶ X - Primer hashtag tiene', datosConsolidados.resultadoXCalc.hashtags[0]?.datosInteraccion.length, 'puntos de datos');
   
   console.log('\nüéâ ========================================');
   console.log('üéâ ¬°SISTEMA COMPLETO FUNCIONANDO! ‚úÖ‚úÖ‚úÖ');
   console.log('üéâ ========================================');
   
   return datosConsolidados;
   
 } catch (error) {
   console.error('\n‚ùå ========================================');
   console.error('‚ùå ERROR EN EL SISTEMA:');
   console.error('‚ùå ========================================');
   console.error(error);
   console.error('\nüîß Revisa que todos los archivos est√©n importados correctamente');
 }
}

// üöÄ EJECUTAR LA PRUEBA
console.log('Iniciando prueba en 1 segundo...');
setTimeout(() => {
 probarSistemaCompleto();
}, 1000);